/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UniversesRouteImport } from './routes/universes'
import { Route as MarketRouteImport } from './routes/market'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CinematicUniverseCreateRouteImport } from './routes/cinematicUniverseCreate'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UniverseIdRouteImport } from './routes/universe/$id'
import { Route as EventUniverseEventRouteImport } from './routes/event.$universe.$event'

const UniversesRoute = UniversesRouteImport.update({
  id: '/universes',
  path: '/universes',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketRoute = MarketRouteImport.update({
  id: '/market',
  path: '/market',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CinematicUniverseCreateRoute = CinematicUniverseCreateRouteImport.update({
  id: '/cinematicUniverseCreate',
  path: '/cinematicUniverseCreate',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UniverseIdRoute = UniverseIdRouteImport.update({
  id: '/universe/$id',
  path: '/universe/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const EventUniverseEventRoute = EventUniverseEventRouteImport.update({
  id: '/event/$universe/$event',
  path: '/event/$universe/$event',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cinematicUniverseCreate': typeof CinematicUniverseCreateRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/market': typeof MarketRoute
  '/universes': typeof UniversesRoute
  '/universe/$id': typeof UniverseIdRoute
  '/event/$universe/$event': typeof EventUniverseEventRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cinematicUniverseCreate': typeof CinematicUniverseCreateRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/market': typeof MarketRoute
  '/universes': typeof UniversesRoute
  '/universe/$id': typeof UniverseIdRoute
  '/event/$universe/$event': typeof EventUniverseEventRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cinematicUniverseCreate': typeof CinematicUniverseCreateRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/market': typeof MarketRoute
  '/universes': typeof UniversesRoute
  '/universe/$id': typeof UniverseIdRoute
  '/event/$universe/$event': typeof EventUniverseEventRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cinematicUniverseCreate'
    | '/dashboard'
    | '/login'
    | '/market'
    | '/universes'
    | '/universe/$id'
    | '/event/$universe/$event'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cinematicUniverseCreate'
    | '/dashboard'
    | '/login'
    | '/market'
    | '/universes'
    | '/universe/$id'
    | '/event/$universe/$event'
  id:
    | '__root__'
    | '/'
    | '/cinematicUniverseCreate'
    | '/dashboard'
    | '/login'
    | '/market'
    | '/universes'
    | '/universe/$id'
    | '/event/$universe/$event'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CinematicUniverseCreateRoute: typeof CinematicUniverseCreateRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  MarketRoute: typeof MarketRoute
  UniversesRoute: typeof UniversesRoute
  UniverseIdRoute: typeof UniverseIdRoute
  EventUniverseEventRoute: typeof EventUniverseEventRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/universes': {
      id: '/universes'
      path: '/universes'
      fullPath: '/universes'
      preLoaderRoute: typeof UniversesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/market': {
      id: '/market'
      path: '/market'
      fullPath: '/market'
      preLoaderRoute: typeof MarketRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cinematicUniverseCreate': {
      id: '/cinematicUniverseCreate'
      path: '/cinematicUniverseCreate'
      fullPath: '/cinematicUniverseCreate'
      preLoaderRoute: typeof CinematicUniverseCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/universe/$id': {
      id: '/universe/$id'
      path: '/universe/$id'
      fullPath: '/universe/$id'
      preLoaderRoute: typeof UniverseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$universe/$event': {
      id: '/event/$universe/$event'
      path: '/event/$universe/$event'
      fullPath: '/event/$universe/$event'
      preLoaderRoute: typeof EventUniverseEventRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CinematicUniverseCreateRoute: CinematicUniverseCreateRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  MarketRoute: MarketRoute,
  UniversesRoute: UniversesRoute,
  UniverseIdRoute: UniverseIdRoute,
  EventUniverseEventRoute: EventUniverseEventRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
